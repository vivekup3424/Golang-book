// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdpPassKernel returns the embedded CollectionSpec for xdpPassKernel.
func loadXdpPassKernel() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdpPassKernelBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdpPassKernel: %w", err)
	}

	return spec, err
}

// loadXdpPassKernelObjects loads xdpPassKernel and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdpPassKernelObjects
//	*xdpPassKernelPrograms
//	*xdpPassKernelMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdpPassKernelObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdpPassKernel()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdpPassKernelSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpPassKernelSpecs struct {
	xdpPassKernelProgramSpecs
	xdpPassKernelMapSpecs
}

// xdpPassKernelSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpPassKernelProgramSpecs struct {
	XdpProgSimple *ebpf.ProgramSpec `ebpf:"xdp_prog_simple"`
}

// xdpPassKernelMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdpPassKernelMapSpecs struct {
}

// xdpPassKernelObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdpPassKernelObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpPassKernelObjects struct {
	xdpPassKernelPrograms
	xdpPassKernelMaps
}

func (o *xdpPassKernelObjects) Close() error {
	return _XdpPassKernelClose(
		&o.xdpPassKernelPrograms,
		&o.xdpPassKernelMaps,
	)
}

// xdpPassKernelMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdpPassKernelObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpPassKernelMaps struct {
}

func (m *xdpPassKernelMaps) Close() error {
	return _XdpPassKernelClose()
}

// xdpPassKernelPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdpPassKernelObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdpPassKernelPrograms struct {
	XdpProgSimple *ebpf.Program `ebpf:"xdp_prog_simple"`
}

func (p *xdpPassKernelPrograms) Close() error {
	return _XdpPassKernelClose(
		p.XdpProgSimple,
	)
}

func _XdpPassKernelClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdppasskernel_bpfeb.o
var _XdpPassKernelBytes []byte
