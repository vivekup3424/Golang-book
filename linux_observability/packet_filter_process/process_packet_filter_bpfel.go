// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadProcess_packet_filter returns the embedded CollectionSpec for process_packet_filter.
func loadProcess_packet_filter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Process_packet_filterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load process_packet_filter: %w", err)
	}

	return spec, err
}

// loadProcess_packet_filterObjects loads process_packet_filter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*process_packet_filterObjects
//	*process_packet_filterPrograms
//	*process_packet_filterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadProcess_packet_filterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadProcess_packet_filter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// process_packet_filterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type process_packet_filterSpecs struct {
	process_packet_filterProgramSpecs
	process_packet_filterMapSpecs
}

// process_packet_filterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type process_packet_filterProgramSpecs struct {
	BlockProcessPorts *ebpf.ProgramSpec `ebpf:"block_process_ports"`
}

// process_packet_filterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type process_packet_filterMapSpecs struct {
}

// process_packet_filterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadProcess_packet_filterObjects or ebpf.CollectionSpec.LoadAndAssign.
type process_packet_filterObjects struct {
	process_packet_filterPrograms
	process_packet_filterMaps
}

func (o *process_packet_filterObjects) Close() error {
	return _Process_packet_filterClose(
		&o.process_packet_filterPrograms,
		&o.process_packet_filterMaps,
	)
}

// process_packet_filterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadProcess_packet_filterObjects or ebpf.CollectionSpec.LoadAndAssign.
type process_packet_filterMaps struct {
}

func (m *process_packet_filterMaps) Close() error {
	return _Process_packet_filterClose()
}

// process_packet_filterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadProcess_packet_filterObjects or ebpf.CollectionSpec.LoadAndAssign.
type process_packet_filterPrograms struct {
	BlockProcessPorts *ebpf.Program `ebpf:"block_process_ports"`
}

func (p *process_packet_filterPrograms) Close() error {
	return _Process_packet_filterClose(
		p.BlockProcessPorts,
	)
}

func _Process_packet_filterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed process_packet_filter_bpfel.o
var _Process_packet_filterBytes []byte
