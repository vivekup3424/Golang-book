// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPortPacketFilter returns the embedded CollectionSpec for portPacketFilter.
func loadPortPacketFilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PortPacketFilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load portPacketFilter: %w", err)
	}

	return spec, err
}

// loadPortPacketFilterObjects loads portPacketFilter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*portPacketFilterObjects
//	*portPacketFilterPrograms
//	*portPacketFilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPortPacketFilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPortPacketFilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// portPacketFilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type portPacketFilterSpecs struct {
	portPacketFilterProgramSpecs
	portPacketFilterMapSpecs
}

// portPacketFilterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type portPacketFilterProgramSpecs struct {
	XdpFilterFunc *ebpf.ProgramSpec `ebpf:"xdp_filter_func"`
}

// portPacketFilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type portPacketFilterMapSpecs struct {
	DropCounter *ebpf.MapSpec `ebpf:"drop_counter"`
	PortMap     *ebpf.MapSpec `ebpf:"port_map"`
}

// portPacketFilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPortPacketFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type portPacketFilterObjects struct {
	portPacketFilterPrograms
	portPacketFilterMaps
}

func (o *portPacketFilterObjects) Close() error {
	return _PortPacketFilterClose(
		&o.portPacketFilterPrograms,
		&o.portPacketFilterMaps,
	)
}

// portPacketFilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPortPacketFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type portPacketFilterMaps struct {
	DropCounter *ebpf.Map `ebpf:"drop_counter"`
	PortMap     *ebpf.Map `ebpf:"port_map"`
}

func (m *portPacketFilterMaps) Close() error {
	return _PortPacketFilterClose(
		m.DropCounter,
		m.PortMap,
	)
}

// portPacketFilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPortPacketFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type portPacketFilterPrograms struct {
	XdpFilterFunc *ebpf.Program `ebpf:"xdp_filter_func"`
}

func (p *portPacketFilterPrograms) Close() error {
	return _PortPacketFilterClose(
		p.XdpFilterFunc,
	)
}

func _PortPacketFilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed portpacketfilter_bpfeb.o
var _PortPacketFilterBytes []byte
